/*
 * Project:         Assignment Set 6 - Program 15
 * Date:            November 2022
 * Developed By:    LV
 * Class Name:      ScoreCard
 * Assumption:      The scorecard is for a specific tournament and year
*/

using System;
using System.Collections.Generic;
using System.Text;

namespace CIS605AS6
{
    class ScoreCard
    {
        #region "Constants"

        const string LPGATour = "2022 U.S. Open", CourseName = "Pines Needles Lodge & Golf Club";

        int[] CoursePars = {5,4,3,4,3,4,4,4,4,5,4,4,3,4,5,3,4,4};

        #endregion

        #region "Properties"

        public string PlayerName { get; private set; }
        public int[,] ScoresByRound { get; private set; }

        #endregion

        #region "Constructor"

        public ScoreCard(string name, int[,] scores)
        {
            PlayerName = name;

            ScoresByRound = scores;
        }

        #endregion

        #region "Methods"

        /* Complete this method to calculate and return the player's status after each hole for a given round.
         * 
         * Status after hole 1 =  Score for hole 1 - Par for hole 1
         * 
         * Status after holes 2 through 18 = 
         * 
         *    Status after previous hole + (Score for current hole - Par for current hole)
        */

        public int[] CalcStatusAfterHole(int round)
        {
            
            //creating a numHoles variable that is set to the same length as the Score by Round entered by the user (18)

            int numHoles = ScoresByRound.GetLength(1);

            //creating a new array called status by hold which will be as long as the numHoles variable which will be 18 (or whatever the amount entered by user)
           
            int[] statusByHole = new int[numHoles];

            //I'm not quite sure what's going on here, maybe this is what you are doing in the very begining, first step, and then after this step, you then move into the loop? 
           
            statusByHole[0] = ScoresByRound[round - 1, 0] - CoursePars[0];

            for (int col = 1; col < numHoles; ++col)
            {
                statusByHole[col] = statusByHole[col - 1] + (ScoresByRound[round - 1, col] - CoursePars[col]);
            }
            return statusByHole; 
        }

        /* Complete this method to calculate and return the player's average score for holes of a specific par (i.e., 3, 4 or 5).
         * 
         * Player's average score for holes of a specific par = 
         * 
         *  Player's total score for holes of a specific par for all 4 rounds / (Total number of holes of a specific par
         *           * number of rounds (i.e., 4))
         *           
         *  Note: Do not use a manual count of the number of holes of a specific par.
         *  
         *  Instead, write code to find the number of holes of a specific par.
        */

        //find holes in the arrary that match the par selected by the user and then add up their scores for thsose holes and then divid by the amount of pars
        //set up loop to search the one demsinal 'par' array to determine the amount of pars 
        // then set up nested loop to look through all four rounds (each element) and then check to see if that score applies to that speicifc par. If if it does, you grab it and add it to total. 
       //coursePar subscript is equal to the subscript selected by the user
       
       //no clue if the below is correct. 
       public double CalcAverageScoreByPar(int par)
        {
             
            int numRounds = ScoresByRound.GetLength(0);
            int numHoles = ScoresByRound.GetLength(1);
            int parHoles = CoursePars.GetLength(0);

            int numHolesByPar = 0;
            double totalParScore = 0;
            int selectedPar = par;
            double averageScoreByPar; 

            for (int p = 0; p < parHoles; ++p)
            {
                if (selectedPar == CoursePars[p])
                {
                    ++numHolesByPar;
                }
            }
            for (int round = 0; round < numRounds; ++round)
            {
                for (int hole = 0; hole < numHoles; ++hole)
                {
                    int parScore = 0;

                    if (CoursePars[hole] == selectedPar)
                    {
                        parScore = ScoresByRound[round, hole];
                    }
                    totalParScore = parScore;
                }

            }

            return averageScoreByPar = totalParScore / (numHolesByPar * 4); 
        }

        

        /* A player's score for a given hole is "consistent" if it is the same for all four rounds. 
         * 
         * Complete this method to find and return the number of holes for which the player's score was "consistent".
        */
        //how many times a player had the same score on a hole for all three rounds
        //go hole by hole for a single round to see if they numbers match, when they don't you're done, go to next hold. If they are the same, you would totle that 
        //create nested loop where outer loop does column and then inner loop reviews rows. in inner loops, you will compre first round to second round. 
        //create boolean variable and set it true by default, if it's not true, you break (false when rows don't match previous
        //outloop 0-17, inner loop 0-2. 
        public int FindNumberOfHolesWithConsistentScore()
        {
            

        }

        /* Complete this method to calculate and return the player's overall performance by score type (i.e., Number of Eagles, Birdies, Pars, Bogeys and Double Bogeys)
         * 
         * Number of Eagles = Count of number of times player's score is two strokes below par
         * 
         * Number of Birdies = Count of number of times player's score is one stroke below par
         * 
         * Number of Pars = Count of number of times player's score is equal to par
         * 
         * Number of Bogeys = Count of number of times player's score is one stroke above par
         * 
         * Number of Double Bogeys = Count of number of times player's score is two strokes above par
        */
        //create variables to hold the number of pars, birdies, bogeys ect then set up nested loop to compare the score to the par. if it's on less, increment the berdie count, if it's euqal, increment the par, if it's one over, increment the bogey count
        //package it into a string and retun all the counts of the various variables. score minus par
        public string CalcPerformanceByScoreType()
        {
            

        }

        #endregion
    }
}
